{"version":3,"sources":["Jumbotron_BS.js","CreateTable.js","MenuNav.js","Navbar.js","Directions.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron_BS","props","state","title","description","name","className","id","this","React","Component","PopulateTable","JSON","parse","localStorage","getItem","ListItem","map","item","price","DynamicTable","MealName","MenuNavBar","tabs","ChangeState","meals","meal","idx","label","key","ListPopulate","ListItems","target","href","URL","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","NavbarItems","mapStyles","width","height","GoogleMap","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","google","zoom","style","initialCenter","lat","lng","position","onClick","visible","GoogleApiWrapper","apiKey","App","Navbar_Items","apiPull","openMeal","console","log","MenuItems","axios","get","then","items","data","menu_items","charCodeAt","toFixed","split","setItem","stringify","length","MenuNav","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7dd32ceb.chunk.js","sourcesContent":["import React from 'react';\nimport { tsPropertySignature } from '@babel/types';\n\nclass Jumbotron_BS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: this.title,\n            description: this.description,\n            name: this.name\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid\" id = \"headImage\">\n                <div className=\"container\">\n                    <h1>{this.props.name}'s</h1>\n                    <h1 className=\"display-3\">{this.props.title}</h1>\n                    <p className=\"lead\">{this.props.description}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron_BS;","import React from 'react'\n\nclass PopulateTable extends React.Component{\n    render(){ \n        let data = JSON.parse(localStorage.getItem(this.props.ListItem))\n\n        return data.map(item => <tr><td id = \"itemTitle\">{item.title[0]}</td>\n        <td id =\"itemDesc\">With {item.description[1]} </td><td>${item.price}</td></tr>)\n    }\n}\n\nclass DynamicTable extends React.Component{\n    render(){ \n        return(\n            <div>\n                <table id = \"#menu\" className = \"table table-striped table-bordered table-dark mx-auto\">\n                    <PopulateTable ListItem={this.props.MealName} />\n                </table>  \n            </div>\n            \n        )\n    }\n}\n\nexport default DynamicTable;","import React from 'react'\nimport { Tabs, Tab } from 'react-bootstrap-tabs';\nimport DynamicTable from './CreateTable';\n\nclass MenuNavBar extends React.Component {\n    render() {\n        let tabs = this.props.ChangeState.meals.map((meal, idx) => {\n            return (\n                <Tab label={meal} key={idx}>\n                    <DynamicTable  MealName={meal} key={idx}/>\n                </Tab>);\n        })\n\n        return (\n            <Tabs>\n                {tabs}\n            </Tabs>\n        )\n\n    }\n}\n\nexport default MenuNavBar;\n\n\n","import React, { Component } from 'react'\nimport Jumbotron_BS from './Jumbotron_BS';\n\n\nclass ListPopulate extends Component {\n    render() {\n        return (\n            this.props.ListItems.map((item, idx) => {\n                return (\n                    <a key={idx} target={item.target} className=\"nav-item nav-link\" href={item.URL}>{item.name} </a>\n                )\n            })\n        )\n    }\n}\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\" id = \"NavBar\">\n                <button className=\"navbar-toggler mx-auto\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mx-auto\">\n                        <ul className=\"navbar-nav mx-auto\">\n                            <ListPopulate ListItems={this.props.NavbarItems} />\n                        </ul>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\nexport default Navbar;\n\n","import React from 'react'\nimport {Map, GoogleApiWrapper, Marker, InfoWindow} from 'google-maps-react';\n\nconst mapStyles = {\n    width: \"100vw\",\n    height: \"40vh\"\n};\n\nclass GoogleMap extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace:{}\n        }\n    }\n\n    onMarkerClick = (props, marker, e) => this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n    });\n\n    onClose = props => {\n        if(this.state.showingInfoWindow){\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n    };\n\nrender(){\n    return(\n        <div>\n        <Map\n            google={this.props.google}\n            zoom={16}\n            style={mapStyles}\n            initialCenter={{\n                lat: 38.042346,\n                lng: -84.492603            \n                }}\n        >\n            <Marker position={{lat: 38.042346,  lng: -84.492603 }}\n                onClick={this.onMarkerClick}\n                name={\"Will's Sub-Standard\"} />\n\n            <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}>\n\n                <div>\n                    <h2> {this.state.selectedPlace.name}\n\n                    </h2>\n                </div>\n            </InfoWindow>\n        </Map>\n        \n        <h2>348 E. Main St.</h2>\n        </div>\n\n\n    )\n}}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyCzoDBNFx-EuHZlfibFPP8-uMePFe1AKWU'\n  })(GoogleMap);","import React from 'react';\nimport './App.css';\nimport Jumbotron_BS from './Jumbotron_BS';\nimport MenuNav from './MenuNav';\nimport DynamicTable from './CreateTable'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport Navbar from './Navbar'\nimport GoogleMap from './Directions'\n\nimport axios from 'axios';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      meals: [\n        \"Breakfast\",\n        \"Lunch\",\n        \"Dinner\",\n        \"Sides\",\n        \"Dessert\"\n      ],\n      name: \"Will\",\n    }\n    this.Navbar_Items = [\n      { name: \"Menu\", URL: '#menu' , target: '_SELF'},\n      { name: \"Map\", URL: '#map' , target: '_SELF'},\n      { name: \"Contact\", URL: '#contact' , target: '_SELF'}]\n\n  \n    }\n  componentDidMount() {\n    \n    // Check if menu data already exists in local storage.\n    //If so, store data in local storage in menu state, else pull from API\n    this.apiPull();\n    \n    this.setState({\n      openMeal: \"Breakfast\"\n    });\n  }\n  \n  apiPull() {\n    if (!localStorage.getItem('Breakfast')) {\n      console.log('no data');\n      this.state.meals.map(MenuItems => {\n        console.log(MenuItems);\n        axios.get('https://entree-f18.herokuapp.com/v1/menu/12')\n          .then(items => {\n            let data = items.data.menu_items.map(item => {\n              let price = (item.description.charCodeAt(0) - (item.description.charCodeAt(8)/2)).toFixed(2);\n              let title = item.description.split(\" with\");\n              let description = item.description.split(\"with \");\n              return { price, title, description }\n              \n            });\n          localStorage.setItem(MenuItems, JSON.stringify(data));\n\n          this.setState({meal: \"Breakfast\"})\n          })\n          ;\n      }\n      \n      );\n    }\n}\n\n  render () {\n          \n    return localStorage.length > 0 ? (\n      <div className=\"App\">\n        <Navbar NavbarItems={this.Navbar_Items} />\n        <Jumbotron_BS title=\"Sub-Standard\" description=\"The standard in sub sammichs\" name = {this.state.name}/>\n        <MenuNav ChangeState={this.state} />\n        <h2 id = 'contact'>348 E. Main. St</h2>\n        <h3><a href = \"tel: 555-555-5555\">555-555-5555</a></h3>\n        <section id = \"map\">\n        <GoogleMap />\n        </section>\n        \n      </div>\n      \n    ) :\n    (<div>\n      Loading\n    </div>)\n\n  \n  }\n  render(){\t\n    return localStorage.length > 0 ? (\t\n      <div className=\"App\">\t\n        <Jumbotron_BS title=\"Sub-Standard\" description=\"The standard in sub sammichs\" name = {this.state.name}/>\n        <Navbar NavbarItems={this.Navbar_Items} />\t\n        <MenuNav ChangeState={this.state} />\t\n        <h2 id = 'contact'>348 E. Main. St</h2>\n\n        <h3><a href = \"tel: 555-555-5555\">555-555-5555</a></h3>\n        <section id = \"map\">\n        <GoogleMap />\n        </section>\n      </div>\t\n\n    ) :\t\n    (<div>\t\n      Loading\t\n    </div>)\t\n  }\n  ;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}